<?xml version="1.0" encoding="UTF-8"?>
<definitions name="domainrobot"
 targetNamespace="urn:domainrobot/domainrobot.wsdl"
 xmlns:tns="urn:domainrobot/domainrobot.wsdl"
 xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
 xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:ns="urn:domainrobot"
 xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:HTTP="http://schemas.xmlsoap.org/wsdl/http/"
 xmlns:MIME="http://schemas.xmlsoap.org/wsdl/mime/"
 xmlns:DIME="http://schemas.xmlsoap.org/ws/2002/04/dime/wsdl/"
 xmlns:WSDL="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">

<types>

 <schema targetNamespace="urn:domainrobot"
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:ns="urn:domainrobot"
  xmlns="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="unqualified"
  attributeFormDefault="unqualified">
  <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>
  <complexType name="WarningOrErrorKeyValue"><!-- ns__WarningOrErrorKeyValue -->

   <sequence>
     <element name="key" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__WarningOrErrorKeyValue::key -->
     <element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__WarningOrErrorKeyValue::value -->
   </sequence>
  </complexType>
  <complexType name="WarningOrError"><!-- ns__WarningOrError -->

   <sequence>
     <element name="code" type="xsd:int" minOccurs="1" maxOccurs="1"/><!-- ns__WarningOrError::code -->
     <element name="text" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__WarningOrError::text -->
     <element name="context" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__WarningOrError::context -->
     <element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__WarningOrError::value -->
     <element name="contextPath" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__WarningOrError::contextPath -->
     <element name="contextObject" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__WarningOrError::contextObject -->
     <element name="details" type="ns:WarningOrErrorKeyValue" minOccurs="0" maxOccurs="unbounded"/><!-- ns__WarningOrError::details -->
   </sequence>
  </complexType>
  <complexType name="Metadata"><!-- ns__Metadata -->

   <sequence>
     <element name="serverTransactionId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Metadata::serverTransactionId -->
     <element name="clientTransactionId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Metadata::clientTransactionId -->
   </sequence>
  </complexType>
  <complexType name="CommonResponse"><!-- ns__CommonResponse -->

   <sequence>
     <element name="status" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__CommonResponse::status -->
     <element name="errors" type="ns:WarningOrError" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__CommonResponse::errors -->
     <element name="warnings" type="ns:WarningOrError" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__CommonResponse::warnings -->
     <element name="metadata" type="ns:Metadata" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__CommonResponse::metadata -->
   </sequence>
  </complexType>
  <complexType name="DnsSecKeyData"><!-- ns__DnsSecKeyData -->

   <sequence>
     <element name="flags" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__DnsSecKeyData::flags -->
     <element name="protocol" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__DnsSecKeyData::protocol -->
     <element name="algorithm" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__DnsSecKeyData::algorithm -->
     <element name="publicKey" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DnsSecKeyData::publicKey -->
   </sequence>
  </complexType>
  <complexType name="DnsSecData"><!-- ns__DnsSecData -->

   <sequence>
     <element name="keyData" type="ns:DnsSecKeyData" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__DnsSecData::keyData -->
     <element name="comment" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DnsSecData::comment -->
     <element name="keyTag" type="xsd:long" minOccurs="0" maxOccurs="1"/><!-- ns__DnsSecData::keyTag -->
   </sequence>
  </complexType>
  <complexType name="DomainContact"><!-- ns__DomainContact -->

   <sequence>
     <element name="type" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainContact::type -->
     <element name="contact" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainContact::contact -->
   </sequence>
  </complexType>
  <complexType name="Event"><!-- ns__Event -->

   <sequence>
     <element name="executionDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Event::executionDate -->
     <element name="action" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Event::action -->
     <element name="data" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Event::data -->
   </sequence>
  </complexType>
  <complexType name="Nameserver"><!-- ns__Nameserver -->

   <sequence>
     <element name="name" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Nameserver::name -->
     <element name="ips" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__Nameserver::ips -->
   </sequence>
  </complexType>
  <complexType name="AbstractFindResult"><!-- ns__AbstractFindResult -->

   <sequence>
     <element name="page" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__AbstractFindResult::page -->
     <element name="limit" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__AbstractFindResult::limit -->
     <element name="totalEntries" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__AbstractFindResult::totalEntries -->
     <element name="totalPages" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__AbstractFindResult::totalPages -->
   </sequence>
  </complexType>
  <complexType name="Contact"><!-- ns__Contact -->

   <sequence>
     <element name="accountId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::accountId -->
     <element name="id" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::id -->
     <element name="handle" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::handle -->
     <element name="type" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Contact::type -->
     <element name="name" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Contact::name -->
     <element name="organization" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::organization -->
     <element name="street" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__Contact::street -->
     <element name="postalCode" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::postalCode -->
     <element name="city" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Contact::city -->
     <element name="state" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::state -->
     <element name="country" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Contact::country -->
     <element name="emailAddress" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::emailAddress -->
     <element name="phoneNumber" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::phoneNumber -->
     <element name="faxNumber" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::faxNumber -->
     <element name="sipUri" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::sipUri -->
     <element name="lastChangeDate" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::lastChangeDate -->
     <element name="addDate" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::addDate -->
     <element name="hidden" type="xsd:boolean" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::hidden -->
     <element name="usableBySubAccount" type="xsd:boolean" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::usableBySubAccount -->
     <element name="extGender" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extGender -->
     <element name="extCompanyNumber" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extCompanyNumber -->
     <element name="extCompanyNumberCountry" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extCompanyNumberCountry -->
     <element name="extTradingName" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTradingName -->
     <element name="extTaxId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTaxId -->
     <element name="extTaxIdCountry" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTaxIdCountry -->
     <element name="extVatId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extVatId -->
     <element name="extVatIdCountry" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extVatIdCountry -->
     <element name="extDateOfBirth" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extDateOfBirth -->
     <element name="extPlaceOfBirth" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extPlaceOfBirth -->
     <element name="extPlaceOfBirthPostalCode" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extPlaceOfBirthPostalCode -->
     <element name="extCountryOfBirth" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extCountryOfBirth -->
     <element name="extNationality" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extNationality -->
     <element name="extLanguage" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extLanguage -->
     <element name="extRemarks" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extRemarks -->
     <element name="extIdentificationCardNumber" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extIdentificationCardNumber -->
     <element name="extIdentificationCardIssuingAuthority" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extIdentificationCardIssuingAuthority -->
     <element name="extIdentificationCardIssueDate" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extIdentificationCardIssueDate -->
     <element name="extIdentificationCardValidUntil" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extIdentificationCardValidUntil -->
     <element name="extIdentificationCardCountry" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extIdentificationCardCountry -->
     <element name="extTradeMarkName" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTradeMarkName -->
     <element name="extTradeMarkRegistrationAuthority" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTradeMarkRegistrationAuthority -->
     <element name="extTradeMarkRegisterNumber" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTradeMarkRegisterNumber -->
     <element name="extTradeMarkCountry" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTradeMarkCountry -->
     <element name="extTradeMarkDateOfApplication" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTradeMarkDateOfApplication -->
     <element name="extTradeMarkDateOfRegistration" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTradeMarkDateOfRegistration -->
     <element name="extAeroIdentificationNumber" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extAeroIdentificationNumber -->
     <element name="extAeroPassword" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extAeroPassword -->
     <element name="extCaLegalType" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extCaLegalType -->
     <element name="extCatIntendedUsage" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extCatIntendedUsage -->
     <element name="extUkType" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extUkType -->
     <element name="extProProfession" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extProProfession -->
     <element name="extProAuthorityName" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extProAuthorityName -->
     <element name="extProAuthorityUrl" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extProAuthorityUrl -->
     <element name="extProLicenseNumber" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extProLicenseNumber -->
     <element name="extTravelUniqueIdentificationNumber" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extTravelUniqueIdentificationNumber -->
     <element name="extXxxMemberId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Contact::extXxxMemberId -->
   </sequence>
  </complexType>
  <complexType name="ContactSetUsableProblem"><!-- ns__ContactSetUsableProblem -->

   <sequence>
     <element name="code" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__ContactSetUsableProblem::code -->
     <element name="text" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__ContactSetUsableProblem::text -->
     <element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__ContactSetUsableProblem::value -->
     <element name="domainSuffix" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__ContactSetUsableProblem::domainSuffix -->
   </sequence>
  </complexType>
  <complexType name="Domain"><!-- ns__Domain -->

   <sequence>
     <element name="accountId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::accountId -->
     <element name="id" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::id -->
     <element name="name" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Domain::name -->
     <element name="nameUnicode" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::nameUnicode -->
     <element name="contacts" type="ns:DomainContact" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__Domain::contacts -->
     <element name="nameservers" type="ns:Nameserver" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__Domain::nameservers -->
     <element name="status" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::status -->
     <element name="transferLockEnabled" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__Domain::transferLockEnabled -->
     <element name="authInfo" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::authInfo -->
     <element name="addDate" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::addDate -->
     <element name="createDate" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::createDate -->
     <element name="lastChangeDate" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::lastChangeDate -->
     <element name="currentContractPeriodEnd" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::currentContractPeriodEnd -->
     <element name="nextContractPeriodStart" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::nextContractPeriodStart -->
     <element name="deletionDate" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::deletionDate -->
     <element name="deletionType" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Domain::deletionType -->
     <element name="dnsSecEntries" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__Domain::dnsSecEntries -->
   </sequence>
  </complexType>
  <complexType name="DomainHistory"><!-- ns__DomainHistory -->

   <sequence>
     <element name="accountId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DomainHistory::accountId -->
     <element name="domainNameAce" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainHistory::domainNameAce -->
     <element name="domainNameUnicode" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainHistory::domainNameUnicode -->
     <element name="type" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainHistory::type -->
     <element name="event" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainHistory::event -->
     <element name="result" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainHistory::result -->
     <element name="details" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainHistory::details -->
     <element name="addDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainHistory::addDate -->
   </sequence>
  </complexType>
  <complexType name="DomainMoveContactData"><!-- ns__DomainMoveContactData -->

   <sequence>
     <element name="contactId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainMoveContactData::contactId -->
     <element name="contactHandle" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainMoveContactData::contactHandle -->
     <element name="availableOptions" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__DomainMoveContactData::availableOptions -->
     <element name="domainsUsed" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__DomainMoveContactData::domainsUsed -->
     <element name="notMovedDomainsUsed" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__DomainMoveContactData::notMovedDomainsUsed -->
     <element name="allocations" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__DomainMoveContactData::allocations -->
     <element name="fromInaccessibleAccount" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__DomainMoveContactData::fromInaccessibleAccount -->
   </sequence>
  </complexType>
  <complexType name="DomainMoveDomainError"><!-- ns__DomainMoveDomainError -->

   <sequence>
     <element name="domainNameAce" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainMoveDomainError::domainNameAce -->
     <element name="domainNameUnicode" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainMoveDomainError::domainNameUnicode -->
     <element name="error" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__DomainMoveDomainError::error -->
   </sequence>
  </complexType>
  <complexType name="HandleTypeInfo"><!-- ns__HandleTypeInfo -->

   <sequence>
     <element name="type" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__HandleTypeInfo::type -->
     <element name="min" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__HandleTypeInfo::min -->
     <element name="max" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__HandleTypeInfo::max -->
     <element name="mandatoryFields" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__HandleTypeInfo::mandatoryFields -->
     <element name="entityTypes" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__HandleTypeInfo::entityTypes -->
   </sequence>
  </complexType>
  <complexType name="Job"><!-- ns__Job -->

   <sequence>
     <element name="id" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Job::id -->
     <element name="accountId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::accountId -->
     <element name="type" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::type -->
     <element name="displayName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::displayName -->
     <element name="domainNameAce" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::domainNameAce -->
     <element name="domainNameUnicode" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::domainNameUnicode -->
     <element name="handle" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::handle -->
     <element name="state" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::state -->
     <element name="subState" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::subState -->
     <element name="events" type="ns:Event" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__Job::events -->
     <element name="comments" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::comments -->
     <element name="errors" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::errors -->
     <element name="clientTransactionId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::clientTransactionId -->
     <element name="serverTransactionId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::serverTransactionId -->
     <element name="executionDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::executionDate -->
     <element name="addDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::addDate -->
     <element name="lastChangeDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__Job::lastChangeDate -->
   </sequence>
  </complexType>
  <complexType name="ConfirmationInfo"><!-- ns__ConfirmationInfo -->

   <sequence>
     <element name="confirmationContext" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__ConfirmationInfo::confirmationContext -->
     <element name="domainNameAce" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__ConfirmationInfo::domainNameAce -->
     <element name="domainNameUnicode" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__ConfirmationInfo::domainNameUnicode -->
     <element name="expiryDateUtc" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__ConfirmationInfo::expiryDateUtc -->
     <element name="specificData" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__ConfirmationInfo::specificData -->
     <element name="status" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__ConfirmationInfo::status -->
   </sequence>
  </complexType>
  <complexType name="ContactSetUsableResult"><!-- ns__ContactSetUsableResult -->

   <sequence>
     <element name="problems" type="ns:ContactSetUsableProblem" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__ContactSetUsableResult::problems -->
   </sequence>
  </complexType>
  <complexType name="ContactUsableResult"><!-- ns__ContactUsableResult -->

   <sequence>
     <element name="missingProperties" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__ContactUsableResult::missingProperties -->
     <element name="mustBeOfType" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__ContactUsableResult::mustBeOfType -->
   </sequence>
  </complexType>
  <complexType name="DomainMoveContactOperation"><!-- ns__DomainMoveContactOperation -->

   <sequence>
     <element name="action" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainMoveContactOperation::action -->
     <element name="sourceContact" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainMoveContactOperation::sourceContact -->
     <element name="replacementContact" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DomainMoveContactOperation::replacementContact -->
   </sequence>
  </complexType>
  <complexType name="DomainMoveQueryResult"><!-- ns__DomainMoveQueryResult -->

   <sequence>
     <element name="domainErrors" type="ns:DomainMoveDomainError" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__DomainMoveQueryResult::domainErrors -->
     <element name="contactData" type="ns:DomainMoveContactData" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__DomainMoveQueryResult::contactData -->
   </sequence>
  </complexType>
  <complexType name="DomainStatusResult"><!-- ns__DomainStatusResult -->

   <sequence>
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainStatusResult::domainName -->
     <element name="domainNameUnicode" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainStatusResult::domainNameUnicode -->
     <element name="extension" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainStatusResult::extension -->
     <element name="domainSuffix" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainStatusResult::domainSuffix -->
     <element name="status" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainStatusResult::status -->
     <element name="transferMethod" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DomainStatusResult::transferMethod -->
     <element name="registrarTag" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DomainStatusResult::registrarTag -->
     <element name="launchPhase" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainStatusResult::launchPhase -->
     <element name="sunriseStart" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DomainStatusResult::sunriseStart -->
     <element name="landrushStart" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DomainStatusResult::landrushStart -->
     <element name="earlyAccessStart" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DomainStatusResult::earlyAccessStart -->
     <element name="generalAvailabilityStart" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__DomainStatusResult::generalAvailabilityStart -->
   </sequence>
  </complexType>
  <complexType name="DomainSuffixInformation"><!-- ns__DomainSuffixInformation -->

   <sequence>
     <element name="transferMethod" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::transferMethod -->
     <element name="withdrawAvailable" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::withdrawAvailable -->
     <element name="deleteAvailable" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::deleteAvailable -->
     <element name="autoRenewAvailable" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::autoRenewAvailable -->
     <element name="renewPeriod" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::renewPeriod -->
     <element name="cancellationPeriod" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::cancellationPeriod -->
     <element name="nameserversMin" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::nameserversMin -->
     <element name="nameserversMax" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::nameserversMax -->
     <element name="dnssec" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__DomainSuffixInformation::dnssec -->
     <element name="handleTypeInfos" type="ns:HandleTypeInfo" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__DomainSuffixInformation::handleTypeInfos -->
   </sequence>
  </complexType>
  <complexType name="Filter"><!-- ns__Filter -->

   <sequence>
     <element name="field" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Filter::field -->
     <element name="value" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Filter::value -->
     <element name="relation" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Filter::relation -->
     <element name="subFilterConnective" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__Filter::subFilterConnective -->
     <element name="subFilter" type="ns:Filter" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__Filter::subFilter -->
   </sequence>
  </complexType>
  <complexType name="FindContactsResult"><!-- ns__FindContactsResult -->

   <complexContent>
    <extension base="ns:AbstractFindResult">
     <sequence>
     <element name="data" type="ns:Contact" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__FindContactsResult::data -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="FindDomainHistoryResult"><!-- ns__FindDomainHistoryResult -->

   <complexContent>
    <extension base="ns:AbstractFindResult">
     <sequence>
     <element name="data" type="ns:DomainHistory" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__FindDomainHistoryResult::data -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="FindDomainsResult"><!-- ns__FindDomainsResult -->

   <complexContent>
    <extension base="ns:AbstractFindResult">
     <sequence>
     <element name="data" type="ns:Domain" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__FindDomainsResult::data -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="FindJobsResult"><!-- ns__FindJobsResult -->

   <complexContent>
    <extension base="ns:AbstractFindResult">
     <sequence>
     <element name="data" type="ns:Job" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__FindJobsResult::data -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="SortOptions"><!-- ns__SortOptions -->

   <sequence>
     <element name="field" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__SortOptions::field -->
     <element name="order" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__SortOptions::order -->
   </sequence>
  </complexType>
  <complexType name="StatisticCumulativeDomainTurnoverElement"><!-- ns__StatisticCumulativeDomainTurnoverElement -->

   <sequence>
     <element name="accountName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticCumulativeDomainTurnoverElement::accountName -->
     <element name="accountId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticCumulativeDomainTurnoverElement::accountId -->
     <element name="customerNumber" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticCumulativeDomainTurnoverElement::customerNumber -->
     <element name="transferIn" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticCumulativeDomainTurnoverElement::transferIn -->
     <element name="transferOut" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticCumulativeDomainTurnoverElement::transferOut -->
     <element name="created" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticCumulativeDomainTurnoverElement::created -->
     <element name="deleted" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticCumulativeDomainTurnoverElement::deleted -->
   </sequence>
  </complexType>
  <complexType name="StatisticDomainCountElement"><!-- ns__StatisticDomainCountElement -->

   <sequence>
     <element name="domainSuffix" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainCountElement::domainSuffix -->
     <element name="count" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainCountElement::count -->
   </sequence>
  </complexType>
  <complexType name="StatisticDomainPortfolioElement"><!-- ns__StatisticDomainPortfolioElement -->

   <sequence>
     <element name="id" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::id -->
     <element name="accountId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::accountId -->
     <element name="customerNumber" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::customerNumber -->
     <element name="domainNameAce" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::domainNameAce -->
     <element name="domainNameUnicode" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::domainNameUnicode -->
     <element name="nameservers" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/><!-- ns__StatisticDomainPortfolioElement::nameservers -->
     <element name="createDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::createDate -->
     <element name="expiryDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::expiryDate -->
     <element name="deleteDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::deleteDate -->
     <element name="adminC" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::adminC -->
     <element name="ownerC" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::ownerC -->
     <element name="techC" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::techC -->
     <element name="zoneC" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::zoneC -->
     <element name="addDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::addDate -->
     <element name="lastUpdate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainPortfolioElement::lastUpdate -->
   </sequence>
  </complexType>
  <complexType name="StatisticDomainTurnoverElement"><!-- ns__StatisticDomainTurnoverElement -->

   <sequence>
     <element name="domainNameAce" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainTurnoverElement::domainNameAce -->
     <element name="accountId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainTurnoverElement::accountId -->
     <element name="customerNumber" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainTurnoverElement::customerNumber -->
     <element name="type" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainTurnoverElement::type -->
     <element name="startDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainTurnoverElement::startDate -->
     <element name="execDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticDomainTurnoverElement::execDate -->
   </sequence>
  </complexType>
  <complexType name="StatisticJobElement"><!-- ns__StatisticJobElement -->

   <sequence>
     <element name="id" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::id -->
     <element name="accountId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::accountId -->
     <element name="customerNumber" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::customerNumber -->
     <element name="domainNameAce" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::domainNameAce -->
     <element name="type" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::type -->
     <element name="state" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::state -->
     <element name="serverTransactionId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::serverTransactionId -->
     <element name="clientTransactionId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::clientTransactionId -->
     <element name="startDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::startDate -->
     <element name="execDate" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__StatisticJobElement::execDate -->
   </sequence>
  </complexType>
  <complexType name="TransferData"><!-- ns__TransferData -->

   <sequence>
     <element name="authInfo" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__TransferData::authInfo -->
     <element name="authInfo2" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__TransferData::authInfo2 -->
     <element name="foaRecipient" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__TransferData::foaRecipient -->
   </sequence>
  </complexType>
  <complexType name="contactCreateRequest"><!-- ns__contactCreateRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__contactCreateRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactCreateRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactCreateRequest::ownerAccountId -->
     <element name="contact" type="ns:Contact" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__contactCreateRequest::contact -->
   </sequence>
  </complexType>
  <complexType name="contactCreateResponseData"><!-- ns__contactCreateResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:Contact" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactCreateResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="contactInfoRequest"><!-- ns__contactInfoRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__contactInfoRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactInfoRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactInfoRequest::ownerAccountId -->
     <element name="contactId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactInfoRequest::contactId -->
   </sequence>
  </complexType>
  <complexType name="contactInfoResponseData"><!-- ns__contactInfoResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:Contact" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactInfoResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="contactSetUsableForRequest"><!-- ns__contactSetUsableForRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__contactSetUsableForRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactSetUsableForRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactSetUsableForRequest::ownerAccountId -->
     <element name="contacts" type="ns:DomainContact" minOccurs="1" maxOccurs="unbounded" nillable="true"/><!-- ns__contactSetUsableForRequest::contacts -->
     <element name="domainSuffixes" type="xsd:string" minOccurs="1" maxOccurs="unbounded"/><!-- ns__contactSetUsableForRequest::domainSuffixes -->
   </sequence>
  </complexType>
  <complexType name="contactSetUsableForResponseData"><!-- ns__contactSetUsableForResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:ContactSetUsableResult" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactSetUsableForResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="contactUpdateRequest"><!-- ns__contactUpdateRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__contactUpdateRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactUpdateRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactUpdateRequest::ownerAccountId -->
     <element name="contact" type="ns:Contact" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__contactUpdateRequest::contact -->
   </sequence>
  </complexType>
  <complexType name="contactUpdateResponseData"><!-- ns__contactUpdateResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:Contact" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactUpdateResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="contactUsableForRequest"><!-- ns__contactUsableForRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__contactUsableForRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactUsableForRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactUsableForRequest::ownerAccountId -->
     <element name="contactId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactUsableForRequest::contactId -->
     <element name="allocation" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactUsableForRequest::allocation -->
     <element name="domainSuffixes" type="xsd:string" minOccurs="1" maxOccurs="unbounded"/><!-- ns__contactUsableForRequest::domainSuffixes -->
   </sequence>
  </complexType>
  <complexType name="contactUsableForResponseData"><!-- ns__contactUsableForResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:ContactUsableResult" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactUsableForResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="contactsFindRequest"><!-- ns__contactsFindRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__contactsFindRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__contactsFindRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactsFindRequest::ownerAccountId -->
     <element name="filter" type="ns:Filter" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactsFindRequest::filter -->
     <element name="limit" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactsFindRequest::limit -->
     <element name="page" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactsFindRequest::page -->
     <element name="sort" type="ns:SortOptions" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactsFindRequest::sort -->
   </sequence>
  </complexType>
  <complexType name="contactsFindResponseData"><!-- ns__contactsFindResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:FindContactsResult" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__contactsFindResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="dnsSecKeyAddRequest"><!-- ns__dnsSecKeyAddRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__dnsSecKeyAddRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeyAddRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__dnsSecKeyAddRequest::ownerAccountId -->
     <element name="keyData" type="ns:DnsSecKeyData" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__dnsSecKeyAddRequest::keyData -->
     <element name="comment" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeyAddRequest::comment -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeyAddRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="dnsSecKeyAddResponseData"><!-- ns__dnsSecKeyAddResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__dnsSecKeyAddResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="dnsSecKeyDeleteRequest"><!-- ns__dnsSecKeyDeleteRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__dnsSecKeyDeleteRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeyDeleteRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__dnsSecKeyDeleteRequest::ownerAccountId -->
     <element name="keyData" type="ns:DnsSecKeyData" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__dnsSecKeyDeleteRequest::keyData -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeyDeleteRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="dnsSecKeyDeleteResponseData"><!-- ns__dnsSecKeyDeleteResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__dnsSecKeyDeleteResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="dnsSecKeyModifyRequest"><!-- ns__dnsSecKeyModifyRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__dnsSecKeyModifyRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeyModifyRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__dnsSecKeyModifyRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeyModifyRequest::domainName -->
     <element name="add" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded"/><!-- ns__dnsSecKeyModifyRequest::add -->
     <element name="remove" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded"/><!-- ns__dnsSecKeyModifyRequest::remove -->
   </sequence>
  </complexType>
  <complexType name="dnsSecKeyModifyResponseData"><!-- ns__dnsSecKeyModifyResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__dnsSecKeyModifyResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="dnsSecKeysListRequest"><!-- ns__dnsSecKeysListRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__dnsSecKeysListRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeysListRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__dnsSecKeysListRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__dnsSecKeysListRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="dnsSecKeysListResponseData"><!-- ns__dnsSecKeysListResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__dnsSecKeysListResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainChangeTagRequest"><!-- ns__domainChangeTagRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainChangeTagRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainChangeTagRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainChangeTagRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainChangeTagRequest::domainName -->
     <element name="tag" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainChangeTagRequest::tag -->
   </sequence>
  </complexType>
  <complexType name="domainChangeTagResponseData"><!-- ns__domainChangeTagResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainConfirmRequest"><!-- ns__domainConfirmRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainConfirmRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainConfirmRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainConfirmRequest::ownerAccountId -->
     <element name="confirmationCode" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainConfirmRequest::confirmationCode -->
     <element name="ack" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__domainConfirmRequest::ack -->
   </sequence>
  </complexType>
  <complexType name="domainConfirmResponseData"><!-- ns__domainConfirmResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainConfirmationInfoRequest"><!-- ns__domainConfirmationInfoRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainConfirmationInfoRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainConfirmationInfoRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainConfirmationInfoRequest::ownerAccountId -->
     <element name="confirmationCode" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainConfirmationInfoRequest::confirmationCode -->
   </sequence>
  </complexType>
  <complexType name="domainConfirmationInfoResponseData"><!-- ns__domainConfirmationInfoResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:ConfirmationInfo" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainConfirmationInfoResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainCreateRequest"><!-- ns__domainCreateRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainCreateRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainCreateRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainCreateRequest::ownerAccountId -->
     <element name="domain" type="ns:Domain" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__domainCreateRequest::domain -->
     <element name="dnsSec" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded"/><!-- ns__domainCreateRequest::dnsSec -->
     <element name="registrationPeriod" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainCreateRequest::registrationPeriod -->
     <element name="execDate" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainCreateRequest::execDate -->
   </sequence>
  </complexType>
  <complexType name="domainCreateResponseData"><!-- ns__domainCreateResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:Domain" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainCreateResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainCreateAuthInfoRequest"><!-- ns__domainCreateAuthInfoRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainCreateAuthInfoRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainCreateAuthInfoRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainCreateAuthInfoRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainCreateAuthInfoRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="domainCreateAuthInfoResponseData"><!-- ns__domainCreateAuthInfoResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainCreateAuthInfo2Request"><!-- ns__domainCreateAuthInfo2Request -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainCreateAuthInfo2Request::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainCreateAuthInfo2Request::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainCreateAuthInfo2Request::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainCreateAuthInfo2Request::domainName -->
   </sequence>
  </complexType>
  <complexType name="domainCreateAuthInfo2ResponseData"><!-- ns__domainCreateAuthInfo2ResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainDeleteRequest"><!-- ns__domainDeleteRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainDeleteRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainDeleteRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainDeleteRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainDeleteRequest::domainName -->
     <element name="execDate" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainDeleteRequest::execDate -->
   </sequence>
  </complexType>
  <complexType name="domainDeleteResponseData"><!-- ns__domainDeleteResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainDeletionCancelRequest"><!-- ns__domainDeletionCancelRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainDeletionCancelRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainDeletionCancelRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainDeletionCancelRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainDeletionCancelRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="domainDeletionCancelResponseData"><!-- ns__domainDeletionCancelResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainHistoryFindRequest"><!-- ns__domainHistoryFindRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainHistoryFindRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainHistoryFindRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainHistoryFindRequest::ownerAccountId -->
     <element name="filter" type="ns:Filter" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainHistoryFindRequest::filter -->
     <element name="limit" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainHistoryFindRequest::limit -->
     <element name="page" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainHistoryFindRequest::page -->
     <element name="sort" type="ns:SortOptions" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainHistoryFindRequest::sort -->
   </sequence>
  </complexType>
  <complexType name="domainHistoryFindResponseData"><!-- ns__domainHistoryFindResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:FindDomainHistoryResult" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainHistoryFindResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainInfoRequest"><!-- ns__domainInfoRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainInfoRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainInfoRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainInfoRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainInfoRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="domainInfoResponseData"><!-- ns__domainInfoResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:Domain" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainInfoResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainMemberWhoisRequest"><!-- ns__domainMemberWhoisRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainMemberWhoisRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainMemberWhoisRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainMemberWhoisRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainMemberWhoisRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="domainMemberWhoisResponseData"><!-- ns__domainMemberWhoisResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainMemberWhoisResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainMoveRequest"><!-- ns__domainMoveRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainMoveRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainMoveRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainMoveRequest::ownerAccountId -->
     <element name="domains" type="xsd:string" minOccurs="1" maxOccurs="unbounded"/><!-- ns__domainMoveRequest::domains -->
     <element name="destinationAccountId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainMoveRequest::destinationAccountId -->
     <element name="contactOperations" type="ns:DomainMoveContactOperation" minOccurs="1" maxOccurs="unbounded" nillable="true"/><!-- ns__domainMoveRequest::contactOperations -->
   </sequence>
  </complexType>
  <complexType name="domainMoveResponseData"><!-- ns__domainMoveResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainMoveQueryRequest"><!-- ns__domainMoveQueryRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainMoveQueryRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainMoveQueryRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainMoveQueryRequest::ownerAccountId -->
     <element name="domains" type="xsd:string" minOccurs="1" maxOccurs="unbounded"/><!-- ns__domainMoveQueryRequest::domains -->
     <element name="destinationAccountId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainMoveQueryRequest::destinationAccountId -->
   </sequence>
  </complexType>
  <complexType name="domainMoveQueryResponseData"><!-- ns__domainMoveQueryResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:DomainMoveQueryResult" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainMoveQueryResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainRestoreRequest"><!-- ns__domainRestoreRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainRestoreRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainRestoreRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainRestoreRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainRestoreRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="domainRestoreResponseData"><!-- ns__domainRestoreResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainStatusRequest"><!-- ns__domainStatusRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainStatusRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainStatusRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainStatusRequest::ownerAccountId -->
     <element name="domainNames" type="xsd:string" minOccurs="1" maxOccurs="unbounded"/><!-- ns__domainStatusRequest::domainNames -->
   </sequence>
  </complexType>
  <complexType name="domainStatusResponseData"><!-- ns__domainStatusResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:DomainStatusResult" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__domainStatusResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainSuffixInformationRequest"><!-- ns__domainSuffixInformationRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainSuffixInformationRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainSuffixInformationRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainSuffixInformationRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainSuffixInformationRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="domainSuffixInformationResponseData"><!-- ns__domainSuffixInformationResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:DomainSuffixInformation" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainSuffixInformationResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainTransferRequest"><!-- ns__domainTransferRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainTransferRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainTransferRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainTransferRequest::ownerAccountId -->
     <element name="domain" type="ns:Domain" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__domainTransferRequest::domain -->
     <element name="dnsSec" type="ns:DnsSecData" minOccurs="0" maxOccurs="unbounded"/><!-- ns__domainTransferRequest::dnsSec -->
     <element name="transferData" type="ns:TransferData" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__domainTransferRequest::transferData -->
     <element name="registrationPeriod" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainTransferRequest::registrationPeriod -->
     <element name="execDate" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainTransferRequest::execDate -->
   </sequence>
  </complexType>
  <complexType name="domainTransferResponseData"><!-- ns__domainTransferResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:Domain" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainTransferResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainTransferOutAckRequest"><!-- ns__domainTransferOutAckRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainTransferOutAckRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainTransferOutAckRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainTransferOutAckRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainTransferOutAckRequest::domainName -->
   </sequence>
  </complexType>
  <complexType name="domainTransferOutAckResponseData"><!-- ns__domainTransferOutAckResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainTransferOutNackRequest"><!-- ns__domainTransferOutNackRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainTransferOutNackRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainTransferOutNackRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainTransferOutNackRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainTransferOutNackRequest::domainName -->
     <element name="reason" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainTransferOutNackRequest::reason -->
   </sequence>
  </complexType>
  <complexType name="domainTransferOutNackResponseData"><!-- ns__domainTransferOutNackResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainUpdateRequest"><!-- ns__domainUpdateRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainUpdateRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainUpdateRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainUpdateRequest::ownerAccountId -->
     <element name="domain" type="ns:Domain" minOccurs="1" maxOccurs="1" nillable="true"/><!-- ns__domainUpdateRequest::domain -->
   </sequence>
  </complexType>
  <complexType name="domainUpdateResponseData"><!-- ns__domainUpdateResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:Domain" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainUpdateResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainWithdrawRequest"><!-- ns__domainWithdrawRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainWithdrawRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainWithdrawRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainWithdrawRequest::ownerAccountId -->
     <element name="domainName" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainWithdrawRequest::domainName -->
     <element name="disconnect" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__domainWithdrawRequest::disconnect -->
     <element name="execDate" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainWithdrawRequest::execDate -->
   </sequence>
  </complexType>
  <complexType name="domainWithdrawResponseData"><!-- ns__domainWithdrawResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="domainsFindRequest"><!-- ns__domainsFindRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__domainsFindRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__domainsFindRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainsFindRequest::ownerAccountId -->
     <element name="filter" type="ns:Filter" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainsFindRequest::filter -->
     <element name="limit" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainsFindRequest::limit -->
     <element name="page" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainsFindRequest::page -->
     <element name="sort" type="ns:SortOptions" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainsFindRequest::sort -->
   </sequence>
  </complexType>
  <complexType name="domainsFindResponseData"><!-- ns__domainsFindResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:FindDomainsResult" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__domainsFindResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="jobCancelRequest"><!-- ns__jobCancelRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__jobCancelRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__jobCancelRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__jobCancelRequest::ownerAccountId -->
     <element name="jobId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__jobCancelRequest::jobId -->
   </sequence>
  </complexType>
  <complexType name="jobCancelResponseData"><!-- ns__jobCancelResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="jobResendEmailRequest"><!-- ns__jobResendEmailRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__jobResendEmailRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__jobResendEmailRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__jobResendEmailRequest::ownerAccountId -->
     <element name="jobId" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__jobResendEmailRequest::jobId -->
   </sequence>
  </complexType>
  <complexType name="jobResendEmailResponseData"><!-- ns__jobResendEmailResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="jobsFindRequest"><!-- ns__jobsFindRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__jobsFindRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__jobsFindRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__jobsFindRequest::ownerAccountId -->
     <element name="filter" type="ns:Filter" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__jobsFindRequest::filter -->
     <element name="limit" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__jobsFindRequest::limit -->
     <element name="page" type="xsd:long" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__jobsFindRequest::page -->
     <element name="sort" type="ns:SortOptions" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__jobsFindRequest::sort -->
   </sequence>
  </complexType>
  <complexType name="jobsFindResponseData"><!-- ns__jobsFindResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="value" type="ns:FindJobsResult" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__jobsFindResponseData::value -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="statisticDomainCountRequest"><!-- ns__statisticDomainCountRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__statisticDomainCountRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticDomainCountRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__statisticDomainCountRequest::ownerAccountId -->
     <element name="withSubAccounts" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__statisticDomainCountRequest::withSubAccounts -->
   </sequence>
  </complexType>
  <complexType name="statisticDomainCountResponseData"><!-- ns__statisticDomainCountResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:StatisticDomainCountElement" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__statisticDomainCountResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="statisticDomainPortfolioRequest"><!-- ns__statisticDomainPortfolioRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__statisticDomainPortfolioRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticDomainPortfolioRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__statisticDomainPortfolioRequest::ownerAccountId -->
     <element name="withSubAccounts" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__statisticDomainPortfolioRequest::withSubAccounts -->
   </sequence>
  </complexType>
  <complexType name="statisticDomainPortfolioResponseData"><!-- ns__statisticDomainPortfolioResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:StatisticDomainPortfolioElement" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__statisticDomainPortfolioResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="statisticDomainTurnoverRequest"><!-- ns__statisticDomainTurnoverRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__statisticDomainTurnoverRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticDomainTurnoverRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__statisticDomainTurnoverRequest::ownerAccountId -->
     <element name="start" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticDomainTurnoverRequest::start -->
     <element name="end" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticDomainTurnoverRequest::end -->
     <element name="withSubAccounts" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__statisticDomainTurnoverRequest::withSubAccounts -->
   </sequence>
  </complexType>
  <complexType name="statisticDomainTurnoverResponseData"><!-- ns__statisticDomainTurnoverResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:StatisticDomainTurnoverElement" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__statisticDomainTurnoverResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="statisticJobsRequest"><!-- ns__statisticJobsRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__statisticJobsRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticJobsRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__statisticJobsRequest::ownerAccountId -->
     <element name="start" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticJobsRequest::start -->
     <element name="end" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticJobsRequest::end -->
     <element name="withSubAccounts" type="xsd:boolean" minOccurs="1" maxOccurs="1"/><!-- ns__statisticJobsRequest::withSubAccounts -->
   </sequence>
  </complexType>
  <complexType name="statisticJobsResponseData"><!-- ns__statisticJobsResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:StatisticJobElement" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__statisticJobsResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
  <complexType name="statisticSubAccountDomainTurnoverRequest"><!-- ns__statisticSubAccountDomainTurnoverRequest -->

   <sequence>
     <element name="clientTransactionId" type="xsd:string" minOccurs="0" maxOccurs="1"/><!-- ns__statisticSubAccountDomainTurnoverRequest::clientTransactionId -->
     <element name="authToken" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticSubAccountDomainTurnoverRequest::authToken -->
     <element name="ownerAccountId" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- ns__statisticSubAccountDomainTurnoverRequest::ownerAccountId -->
     <element name="start" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticSubAccountDomainTurnoverRequest::start -->
     <element name="end" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- ns__statisticSubAccountDomainTurnoverRequest::end -->
     <element name="minInflow" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__statisticSubAccountDomainTurnoverRequest::minInflow -->
     <element name="minOutflow" type="xsd:long" minOccurs="1" maxOccurs="1"/><!-- ns__statisticSubAccountDomainTurnoverRequest::minOutflow -->
   </sequence>
  </complexType>
  <complexType name="statisticSubAccountDomainTurnoverResponseData"><!-- ns__statisticSubAccountDomainTurnoverResponseData -->

   <complexContent>
    <extension base="ns:CommonResponse">
     <sequence>
     <element name="values" type="ns:StatisticCumulativeDomainTurnoverElement" minOccurs="0" maxOccurs="unbounded" nillable="true"/><!-- ns__statisticSubAccountDomainTurnoverResponseData::values -->
     </sequence>
    </extension>
   </complexContent>
  </complexType>
 </schema>

</types>

<message name="contactCreate">
 <part name="request" type="ns:contactCreateRequest"/><!-- ns__contactCreate::request -->
</message>

<message name="contactCreateResponse">
 <part name="response" type="ns:contactCreateResponseData"/><!-- ns__contactCreate::response -->
</message>

<message name="contactInfo">
 <part name="request" type="ns:contactInfoRequest"/><!-- ns__contactInfo::request -->
</message>

<message name="contactInfoResponse">
 <part name="response" type="ns:contactInfoResponseData"/><!-- ns__contactInfo::response -->
</message>

<message name="contactSetUsableFor">
 <part name="request" type="ns:contactSetUsableForRequest"/><!-- ns__contactSetUsableFor::request -->
</message>

<message name="contactSetUsableForResponse">
 <part name="response" type="ns:contactSetUsableForResponseData"/><!-- ns__contactSetUsableFor::response -->
</message>

<message name="contactUpdate">
 <part name="request" type="ns:contactUpdateRequest"/><!-- ns__contactUpdate::request -->
</message>

<message name="contactUpdateResponse">
 <part name="response" type="ns:contactUpdateResponseData"/><!-- ns__contactUpdate::response -->
</message>

<message name="contactUsableFor">
 <part name="request" type="ns:contactUsableForRequest"/><!-- ns__contactUsableFor::request -->
</message>

<message name="contactUsableForResponse">
 <part name="response" type="ns:contactUsableForResponseData"/><!-- ns__contactUsableFor::response -->
</message>

<message name="contactsFind">
 <part name="request" type="ns:contactsFindRequest"/><!-- ns__contactsFind::request -->
</message>

<message name="contactsFindResponse">
 <part name="response" type="ns:contactsFindResponseData"/><!-- ns__contactsFind::response -->
</message>

<message name="dnsSecKeyAdd">
 <part name="request" type="ns:dnsSecKeyAddRequest"/><!-- ns__dnsSecKeyAdd::request -->
</message>

<message name="dnsSecKeyAddResponse">
 <part name="response" type="ns:dnsSecKeyAddResponseData"/><!-- ns__dnsSecKeyAdd::response -->
</message>

<message name="dnsSecKeyDelete">
 <part name="request" type="ns:dnsSecKeyDeleteRequest"/><!-- ns__dnsSecKeyDelete::request -->
</message>

<message name="dnsSecKeyDeleteResponse">
 <part name="response" type="ns:dnsSecKeyDeleteResponseData"/><!-- ns__dnsSecKeyDelete::response -->
</message>

<message name="dnsSecKeyModify">
 <part name="request" type="ns:dnsSecKeyModifyRequest"/><!-- ns__dnsSecKeyModify::request -->
</message>

<message name="dnsSecKeyModifyResponse">
 <part name="response" type="ns:dnsSecKeyModifyResponseData"/><!-- ns__dnsSecKeyModify::response -->
</message>

<message name="dnsSecKeysList">
 <part name="request" type="ns:dnsSecKeysListRequest"/><!-- ns__dnsSecKeysList::request -->
</message>

<message name="dnsSecKeysListResponse">
 <part name="response" type="ns:dnsSecKeysListResponseData"/><!-- ns__dnsSecKeysList::response -->
</message>

<message name="domainChangeTag">
 <part name="request" type="ns:domainChangeTagRequest"/><!-- ns__domainChangeTag::request -->
</message>

<message name="domainChangeTagResponse">
 <part name="response" type="ns:domainChangeTagResponseData"/><!-- ns__domainChangeTag::response -->
</message>

<message name="domainConfirm">
 <part name="request" type="ns:domainConfirmRequest"/><!-- ns__domainConfirm::request -->
</message>

<message name="domainConfirmResponse">
 <part name="response" type="ns:domainConfirmResponseData"/><!-- ns__domainConfirm::response -->
</message>

<message name="domainConfirmationInfo">
 <part name="request" type="ns:domainConfirmationInfoRequest"/><!-- ns__domainConfirmationInfo::request -->
</message>

<message name="domainConfirmationInfoResponse">
 <part name="response" type="ns:domainConfirmationInfoResponseData"/><!-- ns__domainConfirmationInfo::response -->
</message>

<message name="domainCreate">
 <part name="request" type="ns:domainCreateRequest"/><!-- ns__domainCreate::request -->
</message>

<message name="domainCreateResponse">
 <part name="response" type="ns:domainCreateResponseData"/><!-- ns__domainCreate::response -->
</message>

<message name="domainCreateAuthInfo">
 <part name="request" type="ns:domainCreateAuthInfoRequest"/><!-- ns__domainCreateAuthInfo::request -->
</message>

<message name="domainCreateAuthInfoResponse">
 <part name="response" type="ns:domainCreateAuthInfoResponseData"/><!-- ns__domainCreateAuthInfo::response -->
</message>

<message name="domainCreateAuthInfo2">
 <part name="request" type="ns:domainCreateAuthInfo2Request"/><!-- ns__domainCreateAuthInfo2::request -->
</message>

<message name="domainCreateAuthInfo2Response">
 <part name="response" type="ns:domainCreateAuthInfo2ResponseData"/><!-- ns__domainCreateAuthInfo2::response -->
</message>

<message name="domainDelete">
 <part name="request" type="ns:domainDeleteRequest"/><!-- ns__domainDelete::request -->
</message>

<message name="domainDeleteResponse">
 <part name="response" type="ns:domainDeleteResponseData"/><!-- ns__domainDelete::response -->
</message>

<message name="domainDeletionCancel">
 <part name="request" type="ns:domainDeletionCancelRequest"/><!-- ns__domainDeletionCancel::request -->
</message>

<message name="domainDeletionCancelResponse">
 <part name="response" type="ns:domainDeletionCancelResponseData"/><!-- ns__domainDeletionCancel::response -->
</message>

<message name="domainHistoryFind">
 <part name="request" type="ns:domainHistoryFindRequest"/><!-- ns__domainHistoryFind::request -->
</message>

<message name="domainHistoryFindResponse">
 <part name="response" type="ns:domainHistoryFindResponseData"/><!-- ns__domainHistoryFind::response -->
</message>

<message name="domainInfo">
 <part name="request" type="ns:domainInfoRequest"/><!-- ns__domainInfo::request -->
</message>

<message name="domainInfoResponse">
 <part name="response" type="ns:domainInfoResponseData"/><!-- ns__domainInfo::response -->
</message>

<message name="domainMemberWhois">
 <part name="request" type="ns:domainMemberWhoisRequest"/><!-- ns__domainMemberWhois::request -->
</message>

<message name="domainMemberWhoisResponse">
 <part name="response" type="ns:domainMemberWhoisResponseData"/><!-- ns__domainMemberWhois::response -->
</message>

<message name="domainMove">
 <part name="request" type="ns:domainMoveRequest"/><!-- ns__domainMove::request -->
</message>

<message name="domainMoveResponse">
 <part name="response" type="ns:domainMoveResponseData"/><!-- ns__domainMove::response -->
</message>

<message name="domainMoveQuery">
 <part name="request" type="ns:domainMoveQueryRequest"/><!-- ns__domainMoveQuery::request -->
</message>

<message name="domainMoveQueryResponse">
 <part name="response" type="ns:domainMoveQueryResponseData"/><!-- ns__domainMoveQuery::response -->
</message>

<message name="domainRestore">
 <part name="request" type="ns:domainRestoreRequest"/><!-- ns__domainRestore::request -->
</message>

<message name="domainRestoreResponse">
 <part name="response" type="ns:domainRestoreResponseData"/><!-- ns__domainRestore::response -->
</message>

<message name="domainStatus">
 <part name="request" type="ns:domainStatusRequest"/><!-- ns__domainStatus::request -->
</message>

<message name="domainStatusResponse">
 <part name="response" type="ns:domainStatusResponseData"/><!-- ns__domainStatus::response -->
</message>

<message name="domainSuffixInformation">
 <part name="request" type="ns:domainSuffixInformationRequest"/><!-- ns__domainSuffixInformation::request -->
</message>

<message name="domainSuffixInformationResponse">
 <part name="response" type="ns:domainSuffixInformationResponseData"/><!-- ns__domainSuffixInformation::response -->
</message>

<message name="domainTransfer">
 <part name="request" type="ns:domainTransferRequest"/><!-- ns__domainTransfer::request -->
</message>

<message name="domainTransferResponse">
 <part name="response" type="ns:domainTransferResponseData"/><!-- ns__domainTransfer::response -->
</message>

<message name="domainTransferOutAck">
 <part name="request" type="ns:domainTransferOutAckRequest"/><!-- ns__domainTransferOutAck::request -->
</message>

<message name="domainTransferOutAckResponse">
 <part name="response" type="ns:domainTransferOutAckResponseData"/><!-- ns__domainTransferOutAck::response -->
</message>

<message name="domainTransferOutNack">
 <part name="request" type="ns:domainTransferOutNackRequest"/><!-- ns__domainTransferOutNack::request -->
</message>

<message name="domainTransferOutNackResponse">
 <part name="response" type="ns:domainTransferOutNackResponseData"/><!-- ns__domainTransferOutNack::response -->
</message>

<message name="domainUpdate">
 <part name="request" type="ns:domainUpdateRequest"/><!-- ns__domainUpdate::request -->
</message>

<message name="domainUpdateResponse">
 <part name="response" type="ns:domainUpdateResponseData"/><!-- ns__domainUpdate::response -->
</message>

<message name="domainWithdraw">
 <part name="request" type="ns:domainWithdrawRequest"/><!-- ns__domainWithdraw::request -->
</message>

<message name="domainWithdrawResponse">
 <part name="response" type="ns:domainWithdrawResponseData"/><!-- ns__domainWithdraw::response -->
</message>

<message name="domainsFind">
 <part name="request" type="ns:domainsFindRequest"/><!-- ns__domainsFind::request -->
</message>

<message name="domainsFindResponse">
 <part name="response" type="ns:domainsFindResponseData"/><!-- ns__domainsFind::response -->
</message>

<message name="jobCancel">
 <part name="request" type="ns:jobCancelRequest"/><!-- ns__jobCancel::request -->
</message>

<message name="jobCancelResponse">
 <part name="response" type="ns:jobCancelResponseData"/><!-- ns__jobCancel::response -->
</message>

<message name="jobResendEmail">
 <part name="request" type="ns:jobResendEmailRequest"/><!-- ns__jobResendEmail::request -->
</message>

<message name="jobResendEmailResponse">
 <part name="response" type="ns:jobResendEmailResponseData"/><!-- ns__jobResendEmail::response -->
</message>

<message name="jobsFind">
 <part name="request" type="ns:jobsFindRequest"/><!-- ns__jobsFind::request -->
</message>

<message name="jobsFindResponse">
 <part name="response" type="ns:jobsFindResponseData"/><!-- ns__jobsFind::response -->
</message>

<message name="statisticDomainCount">
 <part name="request" type="ns:statisticDomainCountRequest"/><!-- ns__statisticDomainCount::request -->
</message>

<message name="statisticDomainCountResponse">
 <part name="response" type="ns:statisticDomainCountResponseData"/><!-- ns__statisticDomainCount::response -->
</message>

<message name="statisticDomainPortfolio">
 <part name="request" type="ns:statisticDomainPortfolioRequest"/><!-- ns__statisticDomainPortfolio::request -->
</message>

<message name="statisticDomainPortfolioResponse">
 <part name="response" type="ns:statisticDomainPortfolioResponseData"/><!-- ns__statisticDomainPortfolio::response -->
</message>

<message name="statisticDomainTurnover">
 <part name="request" type="ns:statisticDomainTurnoverRequest"/><!-- ns__statisticDomainTurnover::request -->
</message>

<message name="statisticDomainTurnoverResponse">
 <part name="response" type="ns:statisticDomainTurnoverResponseData"/><!-- ns__statisticDomainTurnover::response -->
</message>

<message name="statisticJobs">
 <part name="request" type="ns:statisticJobsRequest"/><!-- ns__statisticJobs::request -->
</message>

<message name="statisticJobsResponse">
 <part name="response" type="ns:statisticJobsResponseData"/><!-- ns__statisticJobs::response -->
</message>

<message name="statisticSubAccountDomainTurnover">
 <part name="request" type="ns:statisticSubAccountDomainTurnoverRequest"/><!-- ns__statisticSubAccountDomainTurnover::request -->
</message>

<message name="statisticSubAccountDomainTurnoverResponse">
 <part name="response" type="ns:statisticSubAccountDomainTurnoverResponseData"/><!-- ns__statisticSubAccountDomainTurnover::response -->
</message>

<portType name="domainrobotPortType">
 <operation name="contactCreate">
  <documentation>Service definition of function ns__contactCreate</documentation>
  <input message="tns:contactCreate"/>
  <output message="tns:contactCreateResponse"/>
 </operation>
 <operation name="contactInfo">
  <documentation>Service definition of function ns__contactInfo</documentation>
  <input message="tns:contactInfo"/>
  <output message="tns:contactInfoResponse"/>
 </operation>
 <operation name="contactSetUsableFor">
  <documentation>Service definition of function ns__contactSetUsableFor</documentation>
  <input message="tns:contactSetUsableFor"/>
  <output message="tns:contactSetUsableForResponse"/>
 </operation>
 <operation name="contactUpdate">
  <documentation>Service definition of function ns__contactUpdate</documentation>
  <input message="tns:contactUpdate"/>
  <output message="tns:contactUpdateResponse"/>
 </operation>
 <operation name="contactUsableFor">
  <documentation>Service definition of function ns__contactUsableFor</documentation>
  <input message="tns:contactUsableFor"/>
  <output message="tns:contactUsableForResponse"/>
 </operation>
 <operation name="contactsFind">
  <documentation>Service definition of function ns__contactsFind</documentation>
  <input message="tns:contactsFind"/>
  <output message="tns:contactsFindResponse"/>
 </operation>
 <operation name="dnsSecKeyAdd">
  <documentation>Service definition of function ns__dnsSecKeyAdd</documentation>
  <input message="tns:dnsSecKeyAdd"/>
  <output message="tns:dnsSecKeyAddResponse"/>
 </operation>
 <operation name="dnsSecKeyDelete">
  <documentation>Service definition of function ns__dnsSecKeyDelete</documentation>
  <input message="tns:dnsSecKeyDelete"/>
  <output message="tns:dnsSecKeyDeleteResponse"/>
 </operation>
 <operation name="dnsSecKeyModify">
  <documentation>Service definition of function ns__dnsSecKeyModify</documentation>
  <input message="tns:dnsSecKeyModify"/>
  <output message="tns:dnsSecKeyModifyResponse"/>
 </operation>
 <operation name="dnsSecKeysList">
  <documentation>Service definition of function ns__dnsSecKeysList</documentation>
  <input message="tns:dnsSecKeysList"/>
  <output message="tns:dnsSecKeysListResponse"/>
 </operation>
 <operation name="domainChangeTag">
  <documentation>Service definition of function ns__domainChangeTag</documentation>
  <input message="tns:domainChangeTag"/>
  <output message="tns:domainChangeTagResponse"/>
 </operation>
 <operation name="domainConfirm">
  <documentation>Service definition of function ns__domainConfirm</documentation>
  <input message="tns:domainConfirm"/>
  <output message="tns:domainConfirmResponse"/>
 </operation>
 <operation name="domainConfirmationInfo">
  <documentation>Service definition of function ns__domainConfirmationInfo</documentation>
  <input message="tns:domainConfirmationInfo"/>
  <output message="tns:domainConfirmationInfoResponse"/>
 </operation>
 <operation name="domainCreate">
  <documentation>Service definition of function ns__domainCreate</documentation>
  <input message="tns:domainCreate"/>
  <output message="tns:domainCreateResponse"/>
 </operation>
 <operation name="domainCreateAuthInfo">
  <documentation>Service definition of function ns__domainCreateAuthInfo</documentation>
  <input message="tns:domainCreateAuthInfo"/>
  <output message="tns:domainCreateAuthInfoResponse"/>
 </operation>
 <operation name="domainCreateAuthInfo2">
  <documentation>Service definition of function ns__domainCreateAuthInfo2</documentation>
  <input message="tns:domainCreateAuthInfo2"/>
  <output message="tns:domainCreateAuthInfo2Response"/>
 </operation>
 <operation name="domainDelete">
  <documentation>Service definition of function ns__domainDelete</documentation>
  <input message="tns:domainDelete"/>
  <output message="tns:domainDeleteResponse"/>
 </operation>
 <operation name="domainDeletionCancel">
  <documentation>Service definition of function ns__domainDeletionCancel</documentation>
  <input message="tns:domainDeletionCancel"/>
  <output message="tns:domainDeletionCancelResponse"/>
 </operation>
 <operation name="domainHistoryFind">
  <documentation>Service definition of function ns__domainHistoryFind</documentation>
  <input message="tns:domainHistoryFind"/>
  <output message="tns:domainHistoryFindResponse"/>
 </operation>
 <operation name="domainInfo">
  <documentation>Service definition of function ns__domainInfo</documentation>
  <input message="tns:domainInfo"/>
  <output message="tns:domainInfoResponse"/>
 </operation>
 <operation name="domainMemberWhois">
  <documentation>Service definition of function ns__domainMemberWhois</documentation>
  <input message="tns:domainMemberWhois"/>
  <output message="tns:domainMemberWhoisResponse"/>
 </operation>
 <operation name="domainMove">
  <documentation>Service definition of function ns__domainMove</documentation>
  <input message="tns:domainMove"/>
  <output message="tns:domainMoveResponse"/>
 </operation>
 <operation name="domainMoveQuery">
  <documentation>Service definition of function ns__domainMoveQuery</documentation>
  <input message="tns:domainMoveQuery"/>
  <output message="tns:domainMoveQueryResponse"/>
 </operation>
 <operation name="domainRestore">
  <documentation>Service definition of function ns__domainRestore</documentation>
  <input message="tns:domainRestore"/>
  <output message="tns:domainRestoreResponse"/>
 </operation>
 <operation name="domainStatus">
  <documentation>Service definition of function ns__domainStatus</documentation>
  <input message="tns:domainStatus"/>
  <output message="tns:domainStatusResponse"/>
 </operation>
 <operation name="domainSuffixInformation">
  <documentation>Service definition of function ns__domainSuffixInformation</documentation>
  <input message="tns:domainSuffixInformation"/>
  <output message="tns:domainSuffixInformationResponse"/>
 </operation>
 <operation name="domainTransfer">
  <documentation>Service definition of function ns__domainTransfer</documentation>
  <input message="tns:domainTransfer"/>
  <output message="tns:domainTransferResponse"/>
 </operation>
 <operation name="domainTransferOutAck">
  <documentation>Service definition of function ns__domainTransferOutAck</documentation>
  <input message="tns:domainTransferOutAck"/>
  <output message="tns:domainTransferOutAckResponse"/>
 </operation>
 <operation name="domainTransferOutNack">
  <documentation>Service definition of function ns__domainTransferOutNack</documentation>
  <input message="tns:domainTransferOutNack"/>
  <output message="tns:domainTransferOutNackResponse"/>
 </operation>
 <operation name="domainUpdate">
  <documentation>Service definition of function ns__domainUpdate</documentation>
  <input message="tns:domainUpdate"/>
  <output message="tns:domainUpdateResponse"/>
 </operation>
 <operation name="domainWithdraw">
  <documentation>Service definition of function ns__domainWithdraw</documentation>
  <input message="tns:domainWithdraw"/>
  <output message="tns:domainWithdrawResponse"/>
 </operation>
 <operation name="domainsFind">
  <documentation>Service definition of function ns__domainsFind</documentation>
  <input message="tns:domainsFind"/>
  <output message="tns:domainsFindResponse"/>
 </operation>
 <operation name="jobCancel">
  <documentation>Service definition of function ns__jobCancel</documentation>
  <input message="tns:jobCancel"/>
  <output message="tns:jobCancelResponse"/>
 </operation>
 <operation name="jobResendEmail">
  <documentation>Service definition of function ns__jobResendEmail</documentation>
  <input message="tns:jobResendEmail"/>
  <output message="tns:jobResendEmailResponse"/>
 </operation>
 <operation name="jobsFind">
  <documentation>Service definition of function ns__jobsFind</documentation>
  <input message="tns:jobsFind"/>
  <output message="tns:jobsFindResponse"/>
 </operation>
 <operation name="statisticDomainCount">
  <documentation>Service definition of function ns__statisticDomainCount</documentation>
  <input message="tns:statisticDomainCount"/>
  <output message="tns:statisticDomainCountResponse"/>
 </operation>
 <operation name="statisticDomainPortfolio">
  <documentation>Service definition of function ns__statisticDomainPortfolio</documentation>
  <input message="tns:statisticDomainPortfolio"/>
  <output message="tns:statisticDomainPortfolioResponse"/>
 </operation>
 <operation name="statisticDomainTurnover">
  <documentation>Service definition of function ns__statisticDomainTurnover</documentation>
  <input message="tns:statisticDomainTurnover"/>
  <output message="tns:statisticDomainTurnoverResponse"/>
 </operation>
 <operation name="statisticJobs">
  <documentation>Service definition of function ns__statisticJobs</documentation>
  <input message="tns:statisticJobs"/>
  <output message="tns:statisticJobsResponse"/>
 </operation>
 <operation name="statisticSubAccountDomainTurnover">
  <documentation>Service definition of function ns__statisticSubAccountDomainTurnover</documentation>
  <input message="tns:statisticSubAccountDomainTurnover"/>
  <output message="tns:statisticSubAccountDomainTurnoverResponse"/>
 </operation>
</portType>

<binding name="domainrobot" type="tns:domainrobotPortType">
 <SOAP:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
 <operation name="contactCreate">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="contactInfo">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="contactSetUsableFor">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="contactUpdate">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="contactUsableFor">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="contactsFind">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="dnsSecKeyAdd">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="dnsSecKeyDelete">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="dnsSecKeyModify">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="dnsSecKeysList">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainChangeTag">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainConfirm">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainConfirmationInfo">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainCreate">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainCreateAuthInfo">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainCreateAuthInfo2">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainDelete">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainDeletionCancel">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainHistoryFind">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainInfo">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainMemberWhois">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainMove">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainMoveQuery">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainRestore">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainStatus">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainSuffixInformation">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainTransfer">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainTransferOutAck">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainTransferOutNack">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainUpdate">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainWithdraw">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="domainsFind">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="jobCancel">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="jobResendEmail">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="jobsFind">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="statisticDomainCount">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="statisticDomainPortfolio">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="statisticDomainTurnover">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="statisticJobs">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
 <operation name="statisticSubAccountDomainTurnover">
  <SOAP:operation style="rpc" soapAction=""/>
  <input>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </input>
  <output>
     <SOAP:body use="encoded" namespace="urn:domainrobot" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
  </output>
 </operation>
</binding>

<service name="domainrobot">
 <documentation>gSOAP 2.8.22 generated service definition</documentation>
 <port name="domainrobot" binding="tns:domainrobot">
  <SOAP:address location="http://localhost:80"/>
 </port>
</service>

</definitions>
